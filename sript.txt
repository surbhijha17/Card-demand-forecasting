import asyncio
import websockets
import numpy as np
import faster_whisper
import time

# Initialize the Faster Whisper model
model = faster_whisper.WhisperModel("medium")

# Parameters
SAMPLE_RATE = 16000  # Hz, match the sample rate used on the client

async def audio_handler(websocket, path):
    print("Connection established.")
    
    try:
        async for message in websocket:
            # Convert the received bytes to a numpy array of PCM data
            pcm_data = np.frombuffer(message, dtype=np.float32)
            print(f"Received PCM data with length: {len(pcm_data)}")

            # Transcribe using Faster Whisper
            start_time = time.time()
            segments, info = model.transcribe(pcm_data, sample_rate=SAMPLE_RATE)
            
            # Combine all transcriptions into a single string
            transcription = ' '.join([segment['text'] for segment in segments])
            print(f"Transcription: {transcription}")
            
            # Send the transcription back to the client if needed
            await websocket.send(transcription)
            
            print(f"Transcription completed in {time.time() - start_time:.2f} seconds.")
    
    except websockets.exceptions.ConnectionClosedError:
        print("Client disconnected.")
    
    finally:
        print("Connection closed.")

start_server = websockets.serve(audio_handler, "localhost", 8765)

asyncio.get_event_loop().run_until_complete(start_server)
print("WebSocket server started. Listening for connections...")
asyncio.get_event_loop().run_forever()
