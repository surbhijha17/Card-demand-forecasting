import asyncio
import websockets
import whisper
import json
import queue
from concurrent.futures import ThreadPoolExecutor
import soundfile as sf

audio_queue = queue.Queue()
executor = ThreadPoolExecutor(max_workers=1)

def process_audio_queue():
    while True:
        audio_data, frame_rate = audio_queue.get()
        try:
            # Convert audio data to a suitable format for Whisper
            audio_array, sample_rate = sf.read(audio_data, dtype='float32')
            if len(audio_array.shape) == 2:
                audio_array = audio_array.mean(axis=1)  # Convert to mono if stereo

            result = whisper.transcribe(audio_model="base", audio=audio_array, sample_rate=sample_rate)
            text = result['text']
            # Send the transcribed text back to the frontend
            print(text)  # Replace with actual sending logic
        except Exception as e:
            print(f"Error processing audio: {e}")
        finally:
            audio_queue.task_done()

executor.submit(process_audio_queue)

async def transcribe(websocket):
    while True:
        try:
            audio_data = await websocket.recv()
            audio_queue.put((audio_data, 16000))  # Assuming 16kHz audio
        except websockets.exceptions.ConnectionClosed:
            break

async def main():
    async with websockets.serve(transcribe, "localhost", 8765):
        print("WebSocket server started")
        await asyncio.Future()

asyncio.run(main())
