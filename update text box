import os
import pandas as pd
import streamlit as st
import tempfile
import shutil
import base64

# Function to update Excel template from DataFrame output and store in a temporary folder
def update_excel_templates(dataframes, template_paths):
    # Create a temporary folder
    temp_dir = tempfile.mkdtemp()
    output_files = []
    # Iterate over each DataFrame and corresponding template
    for i, (df, template_path) in enumerate(zip(dataframes, template_paths)):
        # Load the Excel template
        template_df = pd.read_excel(template_path)
        
        # Update the template with DataFrame output
        updated_df = pd.concat([template_df, df], ignore_index=True)
        
        # Save the updated DataFrame to Excel in the temporary folder
        output_file = os.path.join(temp_dir, f'output_{i}.xlsx')
        updated_df.to_excel(output_file, index=False)
        
        # Add the path to the output Excel file to the list
        output_files.append(output_file)
    
    # Return the paths to the output Excel files and the temporary folder
    return output_files, temp_dir

# Sample DataFrames
df1 = pd.DataFrame({
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Age': [30, 25, 35],
    'City': ['New York', 'Los Angeles', 'Chicago']
})

df2 = pd.DataFrame({
    'ID': [101, 102, 103],
    'Product': ['A', 'B', 'C'],
    'Price': [10.5, 20.2, 15.75]
})

# Sample Excel template paths
template_path1 = 'template1.xlsx'
template_path2 = 'template2.xlsx'

# Update Excel templates from DataFrames and get the paths to the output Excel files and temporary folder
output_file_paths, temp_folder = update_excel_templates([df1, df2], [template_path1, template_path2])

# Compress the temporary folder into a zip file
zip_file_path = shutil.make_archive(temp_folder, 'zip', temp_folder)

# Streamlit app
st.title('Download Folder')

# Provide download link for the zip file
st.write('Download the folder containing the updated Excel files:')
with open(zip_file_path, 'rb') as file:
    file_content = file.read()
st.markdown(f'[Download Folder](data:application/zip;base64,{base64.b64encode(file_content).decode()})', unsafe_allow_html=True)

# Clean up the temporary folder and zip file after use
st.write(f'Cleaning up temporary files...')
shutil.rmtree(temp_folder)
os.remove(zip_file_path)
