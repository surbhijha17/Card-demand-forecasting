import pyaudio
import queue
import threading
import wave

def record_audio(chunk_size, sample_rate, audio_queue):
    p = pyaudio.PyAudio()

    # Open a stream
    stream = p.open(format=pyaudio.paInt16,
                    channels=1,
                    rate=sample_rate,
                    input=True,
                    frames_per_buffer=chunk_size)

    # Continuously record and push audio chunks into the queue
    while True:
        data = stream.read(chunk_size)
        audio_queue.put(data)

    # Stop the stream
    stream.stop_stream()
    stream.close()

    # Terminate the PyAudio instance
    p.terminate()

# Example usage
if __name__ == '__main__':
    # Parameters
    chunk_size = 1024  # Number of frames per audio chunk
    sample_rate = 44100  # Samples per second
    recording_duration = 5  # Duration of the recording in seconds

    # Create a queue to store the audio chunks
    audio_queue = queue.Queue()

    # Start recording in a separate thread
    recording_thread = threading.Thread(target=record_audio, args=(chunk_size, sample_rate, audio_queue))
    recording_thread.start()

    # Do other processing or operations while recording is ongoing
    print("Recording audio...")

    # Wait for the specified duration
    import time
    time.sleep(recording_duration)

    # Stop the recording thread
    recording_thread.join()

    # Process the recorded audio chunks from the queue
    recorded_frames = []
    while not audio_queue.empty():
        audio_data = audio_queue.get()
        recorded_frames.append(audio_data)

    print("Recording complete.")

    # Save the recorded audio to a WAV file
    wave_file = wave.open("recorded_audio.wav", 'wb')
    wave_file.setnchannels(1)  # Mono audio channel
    wave_file.setsampwidth(pyaudio.get_sample_size(pyaudio.paInt16))
    wave_file.setframerate(sample_rate)
    wave_file.writeframes(b''.join(recorded_frames))
    wave_file.close()

    print("Audio saved to recorded_audio.wav.")
