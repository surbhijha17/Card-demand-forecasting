import threading
from unittest.mock import Mock, AsyncMock,MagicMock
from six.moves import queue
import numpy as np
import pytest
from fastapi.websockets import WebSocketDisconnect
from app.utils.language_support.whisper_enums import code_to_language_enum
from app.core.db.services.transcriber import MediaTranslationLiveModelCreateSchema
import time
import uuid


# Import the WhisperTranscoder class
from app.core.live_transcriber.whisper_transcriber import WhisperTranscoder 



def test_init():
    mock_model = Mock()
    mock_websocket = Mock()
    mock_media_translation_service = Mock()

    transcoder = WhisperTranscoder(mock_model, mock_websocket, mock_media_translation_service)

    assert transcoder.start_time is not None
    assert transcoder.buff.qsize() == 0
    assert transcoder.closed is True
    assert transcoder.transcript is None
    assert transcoder.language_detection_chunk.size == 0
    assert transcoder.request_id is not None
    assert transcoder.websocket == mock_websocket
    assert transcoder.media_translation_service == mock_media_translation_service


def test_start(monkeypatch):
    mock_thread = Mock()
    monkeypatch.setattr("threading.Thread", lambda target: mock_thread)

    transcoder = WhisperTranscoder(Mock(), Mock(), Mock())
    transcoder.start()

    mock_thread.start.assert_called_once()


def test_detect_language():
    mock_model = Mock()
    mock_model.transcribe.return_value = ([], Mock(language='en'))

    transcoder = WhisperTranscoder(mock_model, Mock(), Mock())
    transcoder.language_detection_chunk = np.zeros(16000*10, dtype=np.int16)  # Mocking a chunk large enough for detection

    transcoder.detect_language()

    assert transcoder.transcribed_language == 'english'
    mock_model.transcribe.assert_called_once()


def test_process(monkeypatch):
    # Create a mock audio generator that yields a single audio chunk
    mock_audio_generator = iter([b'sample_audio'])
    
    # Mock the transcribe method to return a list of mock segments, each with a text attribute
    mock_transcribe = Mock(return_value=([Mock(text="sample")], {}))

    # Create the transcoder instance
    transcoder = WhisperTranscoder(Mock(transcribe=mock_transcribe), Mock(), Mock())

    # Set language_flag to simulate the condition where language detection is complete
    transcoder.language_flag = True

    # Monkeypatch the stream_generator to return the mock_audio_generator
    monkeypatch.setattr(transcoder, 'stream_generator', lambda: mock_audio_generator)

    # Run the process method
    transcoder.process()

    # Ensure that the transcribe method was called once with the audio data
    mock_transcribe.assert_called_once()
    assert transcoder.final_transcript == "sample"

def test_stream_generator():
    transcoder = WhisperTranscoder(Mock(), Mock(), Mock())
    transcoder.closed = False
    transcoder.buff.put(b'sample_data')
    transcoder.buff.put(None)  # Simulate end of stream

    generator = transcoder.stream_generator()

    assert next(generator) == b'sample_data'
    transcoder.closed = True
    with pytest.raises(StopIteration):
        next(generator)


def test_write():
    transcoder = WhisperTranscoder(Mock(), Mock(), Mock())

    transcoder.write(b'sample_data')

    assert transcoder.buff.qsize() == 1
    assert transcoder.buff.get() == b'sample_data'




import pytest
from unittest.mock import AsyncMock, Mock
from app.core.live_transcriber.whisper_transcriber import WhisperTranscoder

@pytest.mark.asyncio
async def test_whisper_transcribe(monkeypatch):
    # Create mock objects
    mock_websocket = Mock()
    mock_service = Mock()
    
    # Simulate WebSocket behavior
    # First call returns data, second call simulates end of data stream
    mock_websocket.receive_bytes = AsyncMock(side_effect=[b'sample_data', b'', None])
    mock_websocket.send_json = AsyncMock()

    # Mock the media_translation_service methods
    mock_service.create = AsyncMock()
    
    # Instantiate WhisperTranscoder with mocks
    transcoder = WhisperTranscoder(Mock(), mock_websocket, mock_service)
    
    # Mock methods in WhisperTranscoder
    monkeypatch.setattr(transcoder, 'write', Mock())
    monkeypatch.setattr(transcoder, 'start', Mock())

    # Set attributes for the test
    transcoder.language_flag = True
    transcoder.transcribed_language = 'en'
    transcoder.transcript = 'sample_transcript'  # Set a dummy transcript

    # Run the async method
    await transcoder.whisper_transcribe()
    
    # Assertions
    mock_websocket.receive_bytes.assert_called()

    # Print all calls to send_json for debugging
    print(f"send_json calls: {mock_websocket.send_json.call_args_list}")

    # Check if send_json was called with the expected language
    language_calls = [call for call in mock_websocket.send_json.call_args_list if call[0][0] == {'type': 'language', 'language': 'en'}]
    assert len(language_calls) == 1, "send_json({'type': 'language', 'language': 'en'}) call not found exactly once"

    # Check if send_json was called with the expected transcript
    transcript_calls = [call for call in mock_websocket.send_json.call_args_list if call[0][0] == {'type': 'transcript', 'transcript': 'sample_transcript'}]
    assert len(transcript_calls) == 1, "send_json({'type': 'transcript', 'transcript': 'sample_transcript'}) call not found exactly once"

    # Ensure no further language messages were sent after the flag was set to None
    language_calls_after = [call for call in mock_websocket.send_json.call_args_list if call[0][0]['type'] == 'language']
    assert len(language_calls_after) == 1, "send_json({'type': 'language'}) should not be called after initial send"


@pytest.mark.asyncio
async def test_websocket_disconnect():
    # Create mock instances
    mock_whisper_model = MagicMock()
    
    # Mock MediaTranslationService
    mock_media_translation_service = MagicMock()
    mock_media_translation_service.create = AsyncMock()
    mock_media_translation_service.session.commit = AsyncMock()
    
    # Create a mock WebSocket
    websocket = MagicMock()
    websocket.receive_bytes = AsyncMock(side_effect=WebSocketDisconnect)

    # Initialize Transcoder with mocks
    transcoder = WhisperTranscoder(mock_whisper_model, websocket, mock_media_translation_service)
    
    # Run whisper_transcribe and simulate disconnection
    await transcoder.whisper_transcribe()

    # Verify create method was called with the correct parameters
    assert mock_media_translation_service.create.called_once_with(
        MediaTranslationLiveModelCreateSchema(
            uuid=transcoder.request_id,
            duration=time.time() - transcoder.start_time,
            audio_language=transcoder.transcribed_language,
            service_type='Whisper',
            token_length=len(transcoder.final_transcript)
        )
    )

    # Verify session.commit() was called
    assert mock_media_translation_service.session.commit.called_once()
